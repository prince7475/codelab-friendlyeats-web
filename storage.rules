rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if file is an image
    function isImageType(contentType) {
      return contentType.matches('image/.*');
    }

    // Helper function to check if file size is within limits (5MB)
    function isValidSize() {
      return request.resource.size <= 5 * 1024 * 1024;
    }

    // Match user's wardrobe images
    match /users/{userId}/wardrobe/{imageId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId)
                  && isImageType(request.resource.contentType)
                  && isValidSize();
    }

    // Match user's inspiration images by collection
    match /inspiring/{userId}/collection/{collectionId}/{imageId} {
      allow read, list: if isOwner(userId);
      allow create: if isOwner(userId)
                   && isImageType(request.resource.contentType)
                   && isValidSize();
      allow delete: if isOwner(userId);
    }

    // Allow listing collections for deletion
    match /inspiring/{userId}/collection/{collectionId} {
      allow list: if isOwner(userId);
    }
  }
}
